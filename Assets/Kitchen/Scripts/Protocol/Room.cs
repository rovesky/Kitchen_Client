// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `Room.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace Kitchen
{
    namespace PocoInterfaces
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [_System.Serializable]
        public partial class RoomInfoP : _System.ICloneable
        {
            #region Slice data members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public string rmid;

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public string name;

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public string ciph;

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public byte type;

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public string host;

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public string port;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public RoomInfoP()
            {
                this.rmid = "";
                this.name = "";
                this.ciph = "";
                this.host = "";
                this.port = "";
                ice_initialize();
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public RoomInfoP(string rmid, string name, string ciph, byte type, string host, string port)
            {
                this.rmid = rmid;
                this.name = name;
                this.ciph = ciph;
                this.type = type;
                this.host = host;
                this.port = port;
                ice_initialize();
            }

            #endregion

            #region ICloneable members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public object Clone()
            {
                return MemberwiseClone();
            }

            #endregion

            #region Object members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                IceInternal.HashUtil.hashAdd(ref h_, "::Kitchen::PocoInterfaces::RoomInfoP");
                IceInternal.HashUtil.hashAdd(ref h_, rmid);
                IceInternal.HashUtil.hashAdd(ref h_, name);
                IceInternal.HashUtil.hashAdd(ref h_, ciph);
                IceInternal.HashUtil.hashAdd(ref h_, type);
                IceInternal.HashUtil.hashAdd(ref h_, host);
                IceInternal.HashUtil.hashAdd(ref h_, port);
                return h_;
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public override bool Equals(object other)
            {
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                if(other == null)
                {
                    return false;
                }
                if(GetType() != other.GetType())
                {
                    return false;
                }
                RoomInfoP o = (RoomInfoP)other;
                if(this.rmid == null)
                {
                    if(o.rmid != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.rmid.Equals(o.rmid))
                    {
                        return false;
                    }
                }
                if(this.name == null)
                {
                    if(o.name != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.name.Equals(o.name))
                    {
                        return false;
                    }
                }
                if(this.ciph == null)
                {
                    if(o.ciph != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.ciph.Equals(o.ciph))
                    {
                        return false;
                    }
                }
                if(!this.type.Equals(o.type))
                {
                    return false;
                }
                if(this.host == null)
                {
                    if(o.host != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.host.Equals(o.host))
                    {
                        return false;
                    }
                }
                if(this.port == null)
                {
                    if(o.port != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.port.Equals(o.port))
                    {
                        return false;
                    }
                }
                return true;
            }

            #endregion

            #region Comparison members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static bool operator==(RoomInfoP lhs, RoomInfoP rhs)
            {
                return Equals(lhs, rhs);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static bool operator!=(RoomInfoP lhs, RoomInfoP rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public void ice_writeMembers(Ice.OutputStream ostr)
            {
                ostr.writeString(this.rmid);
                ostr.writeString(this.name);
                ostr.writeString(this.ciph);
                ostr.writeByte(this.type);
                ostr.writeString(this.host);
                ostr.writeString(this.port);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public void ice_readMembers(Ice.InputStream istr)
            {
                this.rmid = istr.readString();
                this.name = istr.readString();
                this.ciph = istr.readString();
                this.type = istr.readByte();
                this.host = istr.readString();
                this.port = istr.readString();
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static void ice_write(Ice.OutputStream ostr, RoomInfoP v)
            {
                if(v == null)
                {
                    _nullMarshalValue.ice_writeMembers(ostr);
                }
                else
                {
                    v.ice_writeMembers(ostr);
                }
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static RoomInfoP ice_read(Ice.InputStream istr)
            {
                var v = new RoomInfoP();
                v.ice_readMembers(istr);
                return v;
            }

            private static readonly RoomInfoP _nullMarshalValue = new RoomInfoP();

            #endregion
        }

        [_System.Runtime.InteropServices.ComVisible(false)]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface IRoom : Ice.Object, IRoomOperations_
        {
        }

        [_System.Runtime.InteropServices.ComVisible(false)]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface IRoomPush : Ice.Object, IRoomPushOperations_
        {
        }
    }
}

namespace Kitchen
{
    namespace PocoInterfaces
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public delegate void Callback_IRoom_CreateRoom(RoomInfoP ret);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public delegate void Callback_IRoom_RemoveRoom(bool ret);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public delegate void Callback_IRoom_GetRoomList(_System.Collections.Generic.List<RoomInfoP> ret);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public delegate void Callback_IRoom_GetRoom(RoomInfoP ret);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public delegate void Callback_IRoom_EnterRoom(bool ret);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public delegate void Callback_IRoom_ReadyRoom(bool ret);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public delegate void Callback_IRoomPush_ReadyMessage();

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public delegate void Callback_IRoomPush_EnterMessage();
    }
}

namespace Kitchen
{
    namespace PocoInterfaces
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public interface IRoomPrx : Ice.ObjectPrx
        {
            RoomInfoP CreateRoom(string name, string ciph, byte tp, Ice.OptionalContext context = new Ice.OptionalContext());

            _System.Threading.Tasks.Task<RoomInfoP> CreateRoomAsync(string name, string ciph, byte tp, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

            Ice.AsyncResult<Callback_IRoom_CreateRoom> begin_CreateRoom(string name, string ciph, byte tp, Ice.OptionalContext context = new Ice.OptionalContext());

            Ice.AsyncResult begin_CreateRoom(string name, string ciph, byte tp, Ice.AsyncCallback callback, object cookie);

            Ice.AsyncResult begin_CreateRoom(string name, string ciph, byte tp, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

            RoomInfoP end_CreateRoom(Ice.AsyncResult asyncResult);

            bool RemoveRoom(string roomid, Ice.OptionalContext context = new Ice.OptionalContext());

            _System.Threading.Tasks.Task<bool> RemoveRoomAsync(string roomid, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

            Ice.AsyncResult<Callback_IRoom_RemoveRoom> begin_RemoveRoom(string roomid, Ice.OptionalContext context = new Ice.OptionalContext());

            Ice.AsyncResult begin_RemoveRoom(string roomid, Ice.AsyncCallback callback, object cookie);

            Ice.AsyncResult begin_RemoveRoom(string roomid, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

            bool end_RemoveRoom(Ice.AsyncResult asyncResult);

            _System.Collections.Generic.List<RoomInfoP> GetRoomList(byte type, Ice.OptionalContext context = new Ice.OptionalContext());

            _System.Threading.Tasks.Task<_System.Collections.Generic.List<RoomInfoP>> GetRoomListAsync(byte type, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

            Ice.AsyncResult<Callback_IRoom_GetRoomList> begin_GetRoomList(byte type, Ice.OptionalContext context = new Ice.OptionalContext());

            Ice.AsyncResult begin_GetRoomList(byte type, Ice.AsyncCallback callback, object cookie);

            Ice.AsyncResult begin_GetRoomList(byte type, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

            _System.Collections.Generic.List<RoomInfoP> end_GetRoomList(Ice.AsyncResult asyncResult);

            RoomInfoP GetRoom(string roomid, Ice.OptionalContext context = new Ice.OptionalContext());

            _System.Threading.Tasks.Task<RoomInfoP> GetRoomAsync(string roomid, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

            Ice.AsyncResult<Callback_IRoom_GetRoom> begin_GetRoom(string roomid, Ice.OptionalContext context = new Ice.OptionalContext());

            Ice.AsyncResult begin_GetRoom(string roomid, Ice.AsyncCallback callback, object cookie);

            Ice.AsyncResult begin_GetRoom(string roomid, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

            RoomInfoP end_GetRoom(Ice.AsyncResult asyncResult);

            bool EnterRoom(string roomid, string pwd, Ice.OptionalContext context = new Ice.OptionalContext());

            _System.Threading.Tasks.Task<bool> EnterRoomAsync(string roomid, string pwd, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

            Ice.AsyncResult<Callback_IRoom_EnterRoom> begin_EnterRoom(string roomid, string pwd, Ice.OptionalContext context = new Ice.OptionalContext());

            Ice.AsyncResult begin_EnterRoom(string roomid, string pwd, Ice.AsyncCallback callback, object cookie);

            Ice.AsyncResult begin_EnterRoom(string roomid, string pwd, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

            bool end_EnterRoom(Ice.AsyncResult asyncResult);

            bool ReadyRoom(string roomid, Ice.OptionalContext context = new Ice.OptionalContext());

            _System.Threading.Tasks.Task<bool> ReadyRoomAsync(string roomid, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

            Ice.AsyncResult<Callback_IRoom_ReadyRoom> begin_ReadyRoom(string roomid, Ice.OptionalContext context = new Ice.OptionalContext());

            Ice.AsyncResult begin_ReadyRoom(string roomid, Ice.AsyncCallback callback, object cookie);

            Ice.AsyncResult begin_ReadyRoom(string roomid, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

            bool end_ReadyRoom(Ice.AsyncResult asyncResult);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public interface IRoomPushPrx : Ice.ObjectPrx
        {
            void ReadyMessage(_System.Collections.Generic.List<string> playids, Ice.OptionalContext context = new Ice.OptionalContext());

            _System.Threading.Tasks.Task ReadyMessageAsync(_System.Collections.Generic.List<string> playids, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

            Ice.AsyncResult<Callback_IRoomPush_ReadyMessage> begin_ReadyMessage(_System.Collections.Generic.List<string> playids, Ice.OptionalContext context = new Ice.OptionalContext());

            Ice.AsyncResult begin_ReadyMessage(_System.Collections.Generic.List<string> playids, Ice.AsyncCallback callback, object cookie);

            Ice.AsyncResult begin_ReadyMessage(_System.Collections.Generic.List<string> playids, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

            void end_ReadyMessage(Ice.AsyncResult asyncResult);

            void EnterMessage(_System.Collections.Generic.List<string> playids, Ice.OptionalContext context = new Ice.OptionalContext());

            _System.Threading.Tasks.Task EnterMessageAsync(_System.Collections.Generic.List<string> playids, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

            Ice.AsyncResult<Callback_IRoomPush_EnterMessage> begin_EnterMessage(_System.Collections.Generic.List<string> playids, Ice.OptionalContext context = new Ice.OptionalContext());

            Ice.AsyncResult begin_EnterMessage(_System.Collections.Generic.List<string> playids, Ice.AsyncCallback callback, object cookie);

            Ice.AsyncResult begin_EnterMessage(_System.Collections.Generic.List<string> playids, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

            void end_EnterMessage(Ice.AsyncResult asyncResult);
        }
    }
}

namespace Kitchen
{
    namespace PocoInterfaces
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public interface IRoomOperations_
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            _System.Threading.Tasks.Task<RoomInfoP> CreateRoomAsync(string name, string ciph, byte tp, Ice.Current current = null);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            _System.Threading.Tasks.Task<bool> RemoveRoomAsync(string roomid, Ice.Current current = null);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            _System.Threading.Tasks.Task<_System.Collections.Generic.List<RoomInfoP>> GetRoomListAsync(byte type, Ice.Current current = null);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            _System.Threading.Tasks.Task<RoomInfoP> GetRoomAsync(string roomid, Ice.Current current = null);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            _System.Threading.Tasks.Task<bool> EnterRoomAsync(string roomid, string pwd, Ice.Current current = null);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            _System.Threading.Tasks.Task<bool> ReadyRoomAsync(string roomid, Ice.Current current = null);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public interface IRoomPushOperations_
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            void ReadyMessage(_System.Collections.Generic.List<string> playids, Ice.Current current = null);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            void EnterMessage(_System.Collections.Generic.List<string> playids, Ice.Current current = null);
        }
    }
}

namespace Kitchen
{
    namespace PocoInterfaces
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public sealed class RoomInfoListHelper
        {
            public static void write(Ice.OutputStream ostr, _System.Collections.Generic.List<RoomInfoP> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    for(int ix = 0; ix < v.Count; ++ix)
                    {
                        (v[ix] == null ? new RoomInfoP() : v[ix]).ice_writeMembers(ostr);
                    }
                }
            }

            public static _System.Collections.Generic.List<RoomInfoP> read(Ice.InputStream istr)
            {
                _System.Collections.Generic.List<RoomInfoP> v;
                {
                    int szx = istr.readAndCheckSeqSize(6);
                    v = new _System.Collections.Generic.List<RoomInfoP>(szx);
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        RoomInfoP val = new RoomInfoP();
                        val.ice_readMembers(istr);
                        v.Add(val);
                    }
                }
                return v;
            }
        }

        [_System.Runtime.InteropServices.ComVisible(false)]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        [_System.Serializable]
        public sealed class IRoomPrxHelper : Ice.ObjectPrxHelperBase, IRoomPrx
        {
            public IRoomPrxHelper()
            {
            }

            public IRoomPrxHelper(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public RoomInfoP CreateRoom(string name, string ciph, byte tp, Ice.OptionalContext context = new Ice.OptionalContext())
            {
                try
                {
                    return _iceI_CreateRoomAsync(name, ciph, tp, context, null, _System.Threading.CancellationToken.None, true).Result;
                }
                catch(_System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public bool EnterRoom(string roomid, string pwd, Ice.OptionalContext context = new Ice.OptionalContext())
            {
                try
                {
                    return _iceI_EnterRoomAsync(roomid, pwd, context, null, _System.Threading.CancellationToken.None, true).Result;
                }
                catch(_System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public RoomInfoP GetRoom(string roomid, Ice.OptionalContext context = new Ice.OptionalContext())
            {
                try
                {
                    return _iceI_GetRoomAsync(roomid, context, null, _System.Threading.CancellationToken.None, true).Result;
                }
                catch(_System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public _System.Collections.Generic.List<RoomInfoP> GetRoomList(byte type, Ice.OptionalContext context = new Ice.OptionalContext())
            {
                try
                {
                    return _iceI_GetRoomListAsync(type, context, null, _System.Threading.CancellationToken.None, true).Result;
                }
                catch(_System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public bool ReadyRoom(string roomid, Ice.OptionalContext context = new Ice.OptionalContext())
            {
                try
                {
                    return _iceI_ReadyRoomAsync(roomid, context, null, _System.Threading.CancellationToken.None, true).Result;
                }
                catch(_System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public bool RemoveRoom(string roomid, Ice.OptionalContext context = new Ice.OptionalContext())
            {
                try
                {
                    return _iceI_RemoveRoomAsync(roomid, context, null, _System.Threading.CancellationToken.None, true).Result;
                }
                catch(_System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public _System.Threading.Tasks.Task<RoomInfoP> CreateRoomAsync(string name, string ciph, byte tp, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
            {
                return _iceI_CreateRoomAsync(name, ciph, tp, context, progress, cancel, false);
            }

            private _System.Threading.Tasks.Task<RoomInfoP> _iceI_CreateRoomAsync(string iceP_name, string iceP_ciph, byte iceP_tp, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_CreateRoom_name);
                var completed = new IceInternal.OperationTaskCompletionCallback<RoomInfoP>(progress, cancel);
                _iceI_CreateRoom(iceP_name, iceP_ciph, iceP_tp, context, synchronous, completed);
                return completed.Task;
            }

            private const string _CreateRoom_name = "CreateRoom";

            private void _iceI_CreateRoom(string iceP_name, string iceP_ciph, byte iceP_tp, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<RoomInfoP>(completed);
                outAsync.invoke(
                    _CreateRoom_name,
                    Ice.OperationMode.Normal,
                    Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_name);
                        ostr.writeString(iceP_ciph);
                        ostr.writeByte(iceP_tp);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        RoomInfoP ret = null;
                        ret = RoomInfoP.ice_read(istr);
                        return ret;
                    });
            }

            public _System.Threading.Tasks.Task<bool> EnterRoomAsync(string roomid, string pwd, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
            {
                return _iceI_EnterRoomAsync(roomid, pwd, context, progress, cancel, false);
            }

            private _System.Threading.Tasks.Task<bool> _iceI_EnterRoomAsync(string iceP_roomid, string iceP_pwd, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_EnterRoom_name);
                var completed = new IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                _iceI_EnterRoom(iceP_roomid, iceP_pwd, context, synchronous, completed);
                return completed.Task;
            }

            private const string _EnterRoom_name = "EnterRoom";

            private void _iceI_EnterRoom(string iceP_roomid, string iceP_pwd, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<bool>(completed);
                outAsync.invoke(
                    _EnterRoom_name,
                    Ice.OperationMode.Normal,
                    Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_roomid);
                        ostr.writeString(iceP_pwd);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        bool ret;
                        ret = istr.readBool();
                        return ret;
                    });
            }

            public _System.Threading.Tasks.Task<RoomInfoP> GetRoomAsync(string roomid, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
            {
                return _iceI_GetRoomAsync(roomid, context, progress, cancel, false);
            }

            private _System.Threading.Tasks.Task<RoomInfoP> _iceI_GetRoomAsync(string iceP_roomid, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_GetRoom_name);
                var completed = new IceInternal.OperationTaskCompletionCallback<RoomInfoP>(progress, cancel);
                _iceI_GetRoom(iceP_roomid, context, synchronous, completed);
                return completed.Task;
            }

            private const string _GetRoom_name = "GetRoom";

            private void _iceI_GetRoom(string iceP_roomid, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<RoomInfoP>(completed);
                outAsync.invoke(
                    _GetRoom_name,
                    Ice.OperationMode.Normal,
                    Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_roomid);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        RoomInfoP ret = null;
                        ret = RoomInfoP.ice_read(istr);
                        return ret;
                    });
            }

            public _System.Threading.Tasks.Task<_System.Collections.Generic.List<RoomInfoP>> GetRoomListAsync(byte type, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
            {
                return _iceI_GetRoomListAsync(type, context, progress, cancel, false);
            }

            private _System.Threading.Tasks.Task<_System.Collections.Generic.List<RoomInfoP>> _iceI_GetRoomListAsync(byte iceP_type, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_GetRoomList_name);
                var completed = new IceInternal.OperationTaskCompletionCallback<_System.Collections.Generic.List<RoomInfoP>>(progress, cancel);
                _iceI_GetRoomList(iceP_type, context, synchronous, completed);
                return completed.Task;
            }

            private const string _GetRoomList_name = "GetRoomList";

            private void _iceI_GetRoomList(byte iceP_type, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<_System.Collections.Generic.List<RoomInfoP>>(completed);
                outAsync.invoke(
                    _GetRoomList_name,
                    Ice.OperationMode.Normal,
                    Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeByte(iceP_type);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        _System.Collections.Generic.List<RoomInfoP> ret;
                        ret = RoomInfoListHelper.read(istr);
                        return ret;
                    });
            }

            public _System.Threading.Tasks.Task<bool> ReadyRoomAsync(string roomid, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
            {
                return _iceI_ReadyRoomAsync(roomid, context, progress, cancel, false);
            }

            private _System.Threading.Tasks.Task<bool> _iceI_ReadyRoomAsync(string iceP_roomid, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_ReadyRoom_name);
                var completed = new IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                _iceI_ReadyRoom(iceP_roomid, context, synchronous, completed);
                return completed.Task;
            }

            private const string _ReadyRoom_name = "ReadyRoom";

            private void _iceI_ReadyRoom(string iceP_roomid, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<bool>(completed);
                outAsync.invoke(
                    _ReadyRoom_name,
                    Ice.OperationMode.Normal,
                    Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_roomid);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        bool ret;
                        ret = istr.readBool();
                        return ret;
                    });
            }

            public _System.Threading.Tasks.Task<bool> RemoveRoomAsync(string roomid, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
            {
                return _iceI_RemoveRoomAsync(roomid, context, progress, cancel, false);
            }

            private _System.Threading.Tasks.Task<bool> _iceI_RemoveRoomAsync(string iceP_roomid, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_RemoveRoom_name);
                var completed = new IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                _iceI_RemoveRoom(iceP_roomid, context, synchronous, completed);
                return completed.Task;
            }

            private const string _RemoveRoom_name = "RemoveRoom";

            private void _iceI_RemoveRoom(string iceP_roomid, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<bool>(completed);
                outAsync.invoke(
                    _RemoveRoom_name,
                    Ice.OperationMode.Normal,
                    Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_roomid);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        bool ret;
                        ret = istr.readBool();
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public Ice.AsyncResult<Callback_IRoom_CreateRoom> begin_CreateRoom(string name, string ciph, byte tp, Ice.OptionalContext context = new Ice.OptionalContext())
            {
                return begin_CreateRoom(name, ciph, tp, context, null, null, false);
            }

            public Ice.AsyncResult begin_CreateRoom(string name, string ciph, byte tp, Ice.AsyncCallback callback, object cookie)
            {
                return begin_CreateRoom(name, ciph, tp, new Ice.OptionalContext(), callback, cookie, false);
            }

            public Ice.AsyncResult begin_CreateRoom(string name, string ciph, byte tp, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
            {
                return begin_CreateRoom(name, ciph, tp, context, callback, cookie, false);
            }

            public RoomInfoP end_CreateRoom(Ice.AsyncResult asyncResult)
            {
                var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _CreateRoom_name);
                var outgoing_ = (IceInternal.OutgoingAsyncT<RoomInfoP>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private Ice.AsyncResult<Callback_IRoom_CreateRoom> begin_CreateRoom(string iceP_name, string iceP_ciph, byte iceP_tp, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_CreateRoom_name);
                var completed = new IceInternal.OperationAsyncResultCompletionCallback<Callback_IRoom_CreateRoom, RoomInfoP>(
                    (Callback_IRoom_CreateRoom cb, RoomInfoP ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _CreateRoom_name, cookie, completedCallback);
                _iceI_CreateRoom(iceP_name, iceP_ciph, iceP_tp, context, synchronous, completed);
                return completed;
            }

            public Ice.AsyncResult<Callback_IRoom_EnterRoom> begin_EnterRoom(string roomid, string pwd, Ice.OptionalContext context = new Ice.OptionalContext())
            {
                return begin_EnterRoom(roomid, pwd, context, null, null, false);
            }

            public Ice.AsyncResult begin_EnterRoom(string roomid, string pwd, Ice.AsyncCallback callback, object cookie)
            {
                return begin_EnterRoom(roomid, pwd, new Ice.OptionalContext(), callback, cookie, false);
            }

            public Ice.AsyncResult begin_EnterRoom(string roomid, string pwd, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
            {
                return begin_EnterRoom(roomid, pwd, context, callback, cookie, false);
            }

            public bool end_EnterRoom(Ice.AsyncResult asyncResult)
            {
                var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _EnterRoom_name);
                var outgoing_ = (IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private Ice.AsyncResult<Callback_IRoom_EnterRoom> begin_EnterRoom(string iceP_roomid, string iceP_pwd, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_EnterRoom_name);
                var completed = new IceInternal.OperationAsyncResultCompletionCallback<Callback_IRoom_EnterRoom, bool>(
                    (Callback_IRoom_EnterRoom cb, bool ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _EnterRoom_name, cookie, completedCallback);
                _iceI_EnterRoom(iceP_roomid, iceP_pwd, context, synchronous, completed);
                return completed;
            }

            public Ice.AsyncResult<Callback_IRoom_GetRoom> begin_GetRoom(string roomid, Ice.OptionalContext context = new Ice.OptionalContext())
            {
                return begin_GetRoom(roomid, context, null, null, false);
            }

            public Ice.AsyncResult begin_GetRoom(string roomid, Ice.AsyncCallback callback, object cookie)
            {
                return begin_GetRoom(roomid, new Ice.OptionalContext(), callback, cookie, false);
            }

            public Ice.AsyncResult begin_GetRoom(string roomid, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
            {
                return begin_GetRoom(roomid, context, callback, cookie, false);
            }

            public RoomInfoP end_GetRoom(Ice.AsyncResult asyncResult)
            {
                var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _GetRoom_name);
                var outgoing_ = (IceInternal.OutgoingAsyncT<RoomInfoP>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private Ice.AsyncResult<Callback_IRoom_GetRoom> begin_GetRoom(string iceP_roomid, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_GetRoom_name);
                var completed = new IceInternal.OperationAsyncResultCompletionCallback<Callback_IRoom_GetRoom, RoomInfoP>(
                    (Callback_IRoom_GetRoom cb, RoomInfoP ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _GetRoom_name, cookie, completedCallback);
                _iceI_GetRoom(iceP_roomid, context, synchronous, completed);
                return completed;
            }

            public Ice.AsyncResult<Callback_IRoom_GetRoomList> begin_GetRoomList(byte type, Ice.OptionalContext context = new Ice.OptionalContext())
            {
                return begin_GetRoomList(type, context, null, null, false);
            }

            public Ice.AsyncResult begin_GetRoomList(byte type, Ice.AsyncCallback callback, object cookie)
            {
                return begin_GetRoomList(type, new Ice.OptionalContext(), callback, cookie, false);
            }

            public Ice.AsyncResult begin_GetRoomList(byte type, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
            {
                return begin_GetRoomList(type, context, callback, cookie, false);
            }

            public _System.Collections.Generic.List<RoomInfoP> end_GetRoomList(Ice.AsyncResult asyncResult)
            {
                var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _GetRoomList_name);
                var outgoing_ = (IceInternal.OutgoingAsyncT<_System.Collections.Generic.List<RoomInfoP>>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private Ice.AsyncResult<Callback_IRoom_GetRoomList> begin_GetRoomList(byte iceP_type, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_GetRoomList_name);
                var completed = new IceInternal.OperationAsyncResultCompletionCallback<Callback_IRoom_GetRoomList, _System.Collections.Generic.List<RoomInfoP>>(
                    (Callback_IRoom_GetRoomList cb, _System.Collections.Generic.List<RoomInfoP> ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _GetRoomList_name, cookie, completedCallback);
                _iceI_GetRoomList(iceP_type, context, synchronous, completed);
                return completed;
            }

            public Ice.AsyncResult<Callback_IRoom_ReadyRoom> begin_ReadyRoom(string roomid, Ice.OptionalContext context = new Ice.OptionalContext())
            {
                return begin_ReadyRoom(roomid, context, null, null, false);
            }

            public Ice.AsyncResult begin_ReadyRoom(string roomid, Ice.AsyncCallback callback, object cookie)
            {
                return begin_ReadyRoom(roomid, new Ice.OptionalContext(), callback, cookie, false);
            }

            public Ice.AsyncResult begin_ReadyRoom(string roomid, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
            {
                return begin_ReadyRoom(roomid, context, callback, cookie, false);
            }

            public bool end_ReadyRoom(Ice.AsyncResult asyncResult)
            {
                var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _ReadyRoom_name);
                var outgoing_ = (IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private Ice.AsyncResult<Callback_IRoom_ReadyRoom> begin_ReadyRoom(string iceP_roomid, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_ReadyRoom_name);
                var completed = new IceInternal.OperationAsyncResultCompletionCallback<Callback_IRoom_ReadyRoom, bool>(
                    (Callback_IRoom_ReadyRoom cb, bool ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _ReadyRoom_name, cookie, completedCallback);
                _iceI_ReadyRoom(iceP_roomid, context, synchronous, completed);
                return completed;
            }

            public Ice.AsyncResult<Callback_IRoom_RemoveRoom> begin_RemoveRoom(string roomid, Ice.OptionalContext context = new Ice.OptionalContext())
            {
                return begin_RemoveRoom(roomid, context, null, null, false);
            }

            public Ice.AsyncResult begin_RemoveRoom(string roomid, Ice.AsyncCallback callback, object cookie)
            {
                return begin_RemoveRoom(roomid, new Ice.OptionalContext(), callback, cookie, false);
            }

            public Ice.AsyncResult begin_RemoveRoom(string roomid, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
            {
                return begin_RemoveRoom(roomid, context, callback, cookie, false);
            }

            public bool end_RemoveRoom(Ice.AsyncResult asyncResult)
            {
                var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _RemoveRoom_name);
                var outgoing_ = (IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private Ice.AsyncResult<Callback_IRoom_RemoveRoom> begin_RemoveRoom(string iceP_roomid, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_RemoveRoom_name);
                var completed = new IceInternal.OperationAsyncResultCompletionCallback<Callback_IRoom_RemoveRoom, bool>(
                    (Callback_IRoom_RemoveRoom cb, bool ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _RemoveRoom_name, cookie, completedCallback);
                _iceI_RemoveRoom(iceP_roomid, context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static IRoomPrx checkedCast(Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                IRoomPrx r = b as IRoomPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    IRoomPrxHelper h = new IRoomPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static IRoomPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                IRoomPrx r = b as IRoomPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    IRoomPrxHelper h = new IRoomPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static IRoomPrx checkedCast(Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        IRoomPrxHelper h = new IRoomPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static IRoomPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        IRoomPrxHelper h = new IRoomPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static IRoomPrx uncheckedCast(Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                IRoomPrx r = b as IRoomPrx;
                if(r == null)
                {
                    IRoomPrxHelper h = new IRoomPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static IRoomPrx uncheckedCast(Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                Ice.ObjectPrx bb = b.ice_facet(f);
                IRoomPrxHelper h = new IRoomPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Kitchen::PocoInterfaces::IRoom"
            };

            public static string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Marshaling support

            public static void write(Ice.OutputStream ostr, IRoomPrx v)
            {
                ostr.writeProxy(v);
            }

            public static IRoomPrx read(Ice.InputStream istr)
            {
                Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    IRoomPrxHelper result = new IRoomPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public sealed class PlayIdListHelper
        {
            public static void write(Ice.OutputStream ostr, _System.Collections.Generic.List<string> v)
            {
                ostr.writeStringSeq(v == null ? 0 : v.Count, v);
            }

            public static _System.Collections.Generic.List<string> read(Ice.InputStream istr)
            {
                _System.Collections.Generic.List<string> v;
                istr.readStringSeq(out v);
                return v;
            }
        }

        [_System.Runtime.InteropServices.ComVisible(false)]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        [_System.Serializable]
        public sealed class IRoomPushPrxHelper : Ice.ObjectPrxHelperBase, IRoomPushPrx
        {
            public IRoomPushPrxHelper()
            {
            }

            public IRoomPushPrxHelper(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public void EnterMessage(_System.Collections.Generic.List<string> playids, Ice.OptionalContext context = new Ice.OptionalContext())
            {
                try
                {
                    _iceI_EnterMessageAsync(playids, context, null, _System.Threading.CancellationToken.None, true).Wait();
                }
                catch(_System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void ReadyMessage(_System.Collections.Generic.List<string> playids, Ice.OptionalContext context = new Ice.OptionalContext())
            {
                try
                {
                    _iceI_ReadyMessageAsync(playids, context, null, _System.Threading.CancellationToken.None, true).Wait();
                }
                catch(_System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public _System.Threading.Tasks.Task EnterMessageAsync(_System.Collections.Generic.List<string> playids, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
            {
                return _iceI_EnterMessageAsync(playids, context, progress, cancel, false);
            }

            private _System.Threading.Tasks.Task _iceI_EnterMessageAsync(_System.Collections.Generic.List<string> iceP_playids, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_EnterMessage(iceP_playids, context, synchronous, completed);
                return completed.Task;
            }

            private const string _EnterMessage_name = "EnterMessage";

            private void _iceI_EnterMessage(_System.Collections.Generic.List<string> iceP_playids, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _EnterMessage_name,
                    Ice.OperationMode.Normal,
                    Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        PlayIdListHelper.write(ostr, iceP_playids);
                    });
            }

            public _System.Threading.Tasks.Task ReadyMessageAsync(_System.Collections.Generic.List<string> playids, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
            {
                return _iceI_ReadyMessageAsync(playids, context, progress, cancel, false);
            }

            private _System.Threading.Tasks.Task _iceI_ReadyMessageAsync(_System.Collections.Generic.List<string> iceP_playids, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_ReadyMessage(iceP_playids, context, synchronous, completed);
                return completed.Task;
            }

            private const string _ReadyMessage_name = "ReadyMessage";

            private void _iceI_ReadyMessage(_System.Collections.Generic.List<string> iceP_playids, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _ReadyMessage_name,
                    Ice.OperationMode.Normal,
                    Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        PlayIdListHelper.write(ostr, iceP_playids);
                    });
            }

            #endregion

            #region Asynchronous operations

            public Ice.AsyncResult<Callback_IRoomPush_EnterMessage> begin_EnterMessage(_System.Collections.Generic.List<string> playids, Ice.OptionalContext context = new Ice.OptionalContext())
            {
                return begin_EnterMessage(playids, context, null, null, false);
            }

            public Ice.AsyncResult begin_EnterMessage(_System.Collections.Generic.List<string> playids, Ice.AsyncCallback callback, object cookie)
            {
                return begin_EnterMessage(playids, new Ice.OptionalContext(), callback, cookie, false);
            }

            public Ice.AsyncResult begin_EnterMessage(_System.Collections.Generic.List<string> playids, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
            {
                return begin_EnterMessage(playids, context, callback, cookie, false);
            }

            public void end_EnterMessage(Ice.AsyncResult asyncResult)
            {
                var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _EnterMessage_name);
                ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private Ice.AsyncResult<Callback_IRoomPush_EnterMessage> begin_EnterMessage(_System.Collections.Generic.List<string> iceP_playids, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new IceInternal.OperationAsyncResultCompletionCallback<Callback_IRoomPush_EnterMessage, object>(
                    (Callback_IRoomPush_EnterMessage cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _EnterMessage_name, cookie, completedCallback);
                _iceI_EnterMessage(iceP_playids, context, synchronous, completed);
                return completed;
            }

            public Ice.AsyncResult<Callback_IRoomPush_ReadyMessage> begin_ReadyMessage(_System.Collections.Generic.List<string> playids, Ice.OptionalContext context = new Ice.OptionalContext())
            {
                return begin_ReadyMessage(playids, context, null, null, false);
            }

            public Ice.AsyncResult begin_ReadyMessage(_System.Collections.Generic.List<string> playids, Ice.AsyncCallback callback, object cookie)
            {
                return begin_ReadyMessage(playids, new Ice.OptionalContext(), callback, cookie, false);
            }

            public Ice.AsyncResult begin_ReadyMessage(_System.Collections.Generic.List<string> playids, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
            {
                return begin_ReadyMessage(playids, context, callback, cookie, false);
            }

            public void end_ReadyMessage(Ice.AsyncResult asyncResult)
            {
                var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _ReadyMessage_name);
                ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private Ice.AsyncResult<Callback_IRoomPush_ReadyMessage> begin_ReadyMessage(_System.Collections.Generic.List<string> iceP_playids, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new IceInternal.OperationAsyncResultCompletionCallback<Callback_IRoomPush_ReadyMessage, object>(
                    (Callback_IRoomPush_ReadyMessage cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _ReadyMessage_name, cookie, completedCallback);
                _iceI_ReadyMessage(iceP_playids, context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static IRoomPushPrx checkedCast(Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                IRoomPushPrx r = b as IRoomPushPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    IRoomPushPrxHelper h = new IRoomPushPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static IRoomPushPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                IRoomPushPrx r = b as IRoomPushPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    IRoomPushPrxHelper h = new IRoomPushPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static IRoomPushPrx checkedCast(Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        IRoomPushPrxHelper h = new IRoomPushPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static IRoomPushPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        IRoomPushPrxHelper h = new IRoomPushPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static IRoomPushPrx uncheckedCast(Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                IRoomPushPrx r = b as IRoomPushPrx;
                if(r == null)
                {
                    IRoomPushPrxHelper h = new IRoomPushPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static IRoomPushPrx uncheckedCast(Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                Ice.ObjectPrx bb = b.ice_facet(f);
                IRoomPushPrxHelper h = new IRoomPushPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Kitchen::PocoInterfaces::IRoomPush"
            };

            public static string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Marshaling support

            public static void write(Ice.OutputStream ostr, IRoomPushPrx v)
            {
                ostr.writeProxy(v);
            }

            public static IRoomPushPrx read(Ice.InputStream istr)
            {
                Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    IRoomPushPrxHelper result = new IRoomPushPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }
    }
}

namespace Kitchen
{
    namespace PocoInterfaces
    {
        [_System.Runtime.InteropServices.ComVisible(false)]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public abstract class IRoomDisp_ : Ice.ObjectImpl, IRoom
        {
            #region Slice operations

            public abstract _System.Threading.Tasks.Task<RoomInfoP> CreateRoomAsync(string name, string ciph, byte tp, Ice.Current current = null);

            public abstract _System.Threading.Tasks.Task<bool> RemoveRoomAsync(string roomid, Ice.Current current = null);

            public abstract _System.Threading.Tasks.Task<_System.Collections.Generic.List<RoomInfoP>> GetRoomListAsync(byte type, Ice.Current current = null);

            public abstract _System.Threading.Tasks.Task<RoomInfoP> GetRoomAsync(string roomid, Ice.Current current = null);

            public abstract _System.Threading.Tasks.Task<bool> EnterRoomAsync(string roomid, string pwd, Ice.Current current = null);

            public abstract _System.Threading.Tasks.Task<bool> ReadyRoomAsync(string roomid, Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Kitchen::PocoInterfaces::IRoom"
            };

            public override bool ice_isA(string s, Ice.Current current = null)
            {
                return _System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(Ice.Current current = null)
            {
                return _ids[1];
            }

            public static new string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Operation dispatch

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static _System.Threading.Tasks.Task<Ice.OutputStream>
            iceD_CreateRoom(IRoom obj, IceInternal.Incoming inS, Ice.Current current)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                string iceP_name;
                string iceP_ciph;
                byte iceP_tp;
                iceP_name = istr.readString();
                iceP_ciph = istr.readString();
                iceP_tp = istr.readByte();
                inS.endReadParams();
                return inS.setResultTask<RoomInfoP>(obj.CreateRoomAsync(iceP_name, iceP_ciph, iceP_tp, current),
                    (ostr, ret) =>
                    {
                        RoomInfoP.ice_write(ostr, ret);
                    });
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static _System.Threading.Tasks.Task<Ice.OutputStream>
            iceD_RemoveRoom(IRoom obj, IceInternal.Incoming inS, Ice.Current current)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                string iceP_roomid;
                iceP_roomid = istr.readString();
                inS.endReadParams();
                return inS.setResultTask<bool>(obj.RemoveRoomAsync(iceP_roomid, current),
                    (ostr, ret) =>
                    {
                        ostr.writeBool(ret);
                    });
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static _System.Threading.Tasks.Task<Ice.OutputStream>
            iceD_GetRoomList(IRoom obj, IceInternal.Incoming inS, Ice.Current current)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                byte iceP_type;
                iceP_type = istr.readByte();
                inS.endReadParams();
                return inS.setResultTask<_System.Collections.Generic.List<RoomInfoP>>(obj.GetRoomListAsync(iceP_type, current),
                    (ostr, ret) =>
                    {
                        RoomInfoListHelper.write(ostr, ret);
                    });
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static _System.Threading.Tasks.Task<Ice.OutputStream>
            iceD_GetRoom(IRoom obj, IceInternal.Incoming inS, Ice.Current current)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                string iceP_roomid;
                iceP_roomid = istr.readString();
                inS.endReadParams();
                return inS.setResultTask<RoomInfoP>(obj.GetRoomAsync(iceP_roomid, current),
                    (ostr, ret) =>
                    {
                        RoomInfoP.ice_write(ostr, ret);
                    });
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static _System.Threading.Tasks.Task<Ice.OutputStream>
            iceD_EnterRoom(IRoom obj, IceInternal.Incoming inS, Ice.Current current)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                string iceP_roomid;
                string iceP_pwd;
                iceP_roomid = istr.readString();
                iceP_pwd = istr.readString();
                inS.endReadParams();
                return inS.setResultTask<bool>(obj.EnterRoomAsync(iceP_roomid, iceP_pwd, current),
                    (ostr, ret) =>
                    {
                        ostr.writeBool(ret);
                    });
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static _System.Threading.Tasks.Task<Ice.OutputStream>
            iceD_ReadyRoom(IRoom obj, IceInternal.Incoming inS, Ice.Current current)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                string iceP_roomid;
                iceP_roomid = istr.readString();
                inS.endReadParams();
                return inS.setResultTask<bool>(obj.ReadyRoomAsync(iceP_roomid, current),
                    (ostr, ret) =>
                    {
                        ostr.writeBool(ret);
                    });
            }

            private static readonly string[] _all =
            {
                "CreateRoom",
                "EnterRoom",
                "GetRoom",
                "GetRoomList",
                "ReadyRoom",
                "RemoveRoom",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping"
            };

            public override _System.Threading.Tasks.Task<Ice.OutputStream>
            iceDispatch(IceInternal.Incoming inS, Ice.Current current)
            {
                int pos = _System.Array.BinarySearch(_all, current.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_CreateRoom(this, inS, current);
                    }
                    case 1:
                    {
                        return iceD_EnterRoom(this, inS, current);
                    }
                    case 2:
                    {
                        return iceD_GetRoom(this, inS, current);
                    }
                    case 3:
                    {
                        return iceD_GetRoomList(this, inS, current);
                    }
                    case 4:
                    {
                        return iceD_ReadyRoom(this, inS, current);
                    }
                    case 5:
                    {
                        return iceD_RemoveRoom(this, inS, current);
                    }
                    case 6:
                    {
                        return Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 7:
                    {
                        return Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 8:
                    {
                        return Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 9:
                    {
                        return Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                }

                _System.Diagnostics.Debug.Assert(false);
                throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [_System.Runtime.InteropServices.ComVisible(false)]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public abstract class IRoomPushDisp_ : Ice.ObjectImpl, IRoomPush
        {
            #region Slice operations

            public abstract void ReadyMessage(_System.Collections.Generic.List<string> playids, Ice.Current current = null);

            public abstract void EnterMessage(_System.Collections.Generic.List<string> playids, Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::Kitchen::PocoInterfaces::IRoomPush"
            };

            public override bool ice_isA(string s, Ice.Current current = null)
            {
                return _System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(Ice.Current current = null)
            {
                return _ids[1];
            }

            public static new string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Operation dispatch

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static _System.Threading.Tasks.Task<Ice.OutputStream>
            iceD_ReadyMessage(IRoomPush obj, IceInternal.Incoming inS, Ice.Current current)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                _System.Collections.Generic.List<string> iceP_playids;
                iceP_playids = PlayIdListHelper.read(istr);
                inS.endReadParams();
                obj.ReadyMessage(iceP_playids, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static _System.Threading.Tasks.Task<Ice.OutputStream>
            iceD_EnterMessage(IRoomPush obj, IceInternal.Incoming inS, Ice.Current current)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                _System.Collections.Generic.List<string> iceP_playids;
                iceP_playids = PlayIdListHelper.read(istr);
                inS.endReadParams();
                obj.EnterMessage(iceP_playids, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            private static readonly string[] _all =
            {
                "EnterMessage",
                "ReadyMessage",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping"
            };

            public override _System.Threading.Tasks.Task<Ice.OutputStream>
            iceDispatch(IceInternal.Incoming inS, Ice.Current current)
            {
                int pos = _System.Array.BinarySearch(_all, current.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_EnterMessage(this, inS, current);
                    }
                    case 1:
                    {
                        return iceD_ReadyMessage(this, inS, current);
                    }
                    case 2:
                    {
                        return Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 3:
                    {
                        return Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 4:
                    {
                        return Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 5:
                    {
                        return Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                }

                _System.Diagnostics.Debug.Assert(false);
                throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }
    }
}
